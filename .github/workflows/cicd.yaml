name: Continuous Integration & Deployment

on:
  push:
    branches:
      - main
  pull_request:

permissions: read-all

jobs:
  lint:
    uses: ./.github/workflows/lint.yaml

  build:
    uses: ./.github/workflows/build.yaml

  check-deploy-prod:
    if: github.ref_name == 'main'
    environment: production
    needs:
      - lint
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploying to production!"

  init-secrets:
    needs:
      - check-deploy-prod
    runs-on: ubuntu-latest
    steps:
      - id: op-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          cloudflare_api_token: op://Frankenstructure/Cloudflare API Token - frankenstructure/credential
          vultr_api_key: op://Frankenstructure/Vultr API Key/password
      - uses: defrank/action-vultr@v2024.10.20-1
        with:
          token: ${{ steps.op-secrets.outputs.vultr_api_key }}
      - id: s3-keys
        env:
          VULTR_API_KEY: ${{ steps.op-secrets.outputs.vultr_api_key }}
        run: >
          vultr-cli --output=json object-storage list
          | jq --raw-output >> "$GITHUB_OUTPUT" '
          .object_storages[]
          | select(.label == "frankenstorage")
          | ["s3_access_key=" + .s3_access_key, "s3_secret_key=" + .s3_secret_key]
          | join("\n")
          '
      - id: enc-cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.cloudflare_api_token }}
      - id: enc-s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.s3-keys.outputs.s3_access_key }}
      - id: enc-s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.s3-keys.outputs.s3_secret_key }}
      - id: enc-vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.vultr_api_key }}
    outputs:
      enc_cloudflare_api_token: ${{ steps.enc-cloudflare-api-token.outputs.out }}
      enc_s3_access_key: ${{ steps.enc-s3-access-key.outputs.out }}
      enc_s3_secret_key: ${{ steps.enc-s3-secret-key.outputs.out }}
      enc_vultr_api_key: ${{ steps.enc-vultr-api-key.outputs.out }}

  deploy-prod-frankenstructure:
    environment: production
    needs:
      - check-deploy-prod
      - init-secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_cloudflare_api_token }}
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_s3_secret_key }}
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_vultr_api_key }}
      - name: Initialize tofu
        working-directory: terraform/infrastructure/frankenstructure
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
      - name: Deploy
        working-directory: terraform/infrastructure/frankenstructure
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}

  secrets:
    runs-on: ubuntu-latest
    needs:
      - init-secrets
      - deploy-prod-frankenstructure
    steps:
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_vultr_api_key }}
      - id: op-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          discord_webhook_alerts: op://Frankenstructure/Discord Webhook - breaktheloop/url
          grafana_admin_password: op://Frankenstructure/Grafana - frank.sh/password
          healthchecksio_api_key: op://Frankenstructure/Healthchecks.io API Key/credential
          smtp_password: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/password
          smtp_port: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/port
          smtp_server: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/server
          smtp_username: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/username
          todoist_email: op://Frankenstructure/Todoist Project - Frankenstructure/email
      - uses: defrank/action-vultr@v2024.10.20-1
        with:
          token: ${{ steps.vultr-api-key.outputs.out }}
      - id: kubeconfig-base64
        env:
          VULTR_API_KEY: ${{ steps.vultr-api-key.outputs.out }}
        run: >
          echo -n "out=" >> "$GITHUB_OUTPUT";
          vultr-cli --output=json kubernetes list
          | jq --raw-output '.vke_clusters[] | select(.label == "frank8s").id'
          | xargs -- vultr-cli kubernetes config >> "$GITHUB_OUTPUT"
      - id: enc-discord-webhook-alerts
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.discord_webhook_alerts }}
      - id: enc-grafana-admin-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.grafana_admin_password }}
      - id: enc-healthchecksio-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.healthchecksio_api_key }}
      - id: enc-kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.kubeconfig-base64.outputs.out }}
      - id: enc-smtp-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_password }}
      - id: enc-smtp-port
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_port }}
      - id: enc-smtp-server
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_server }}
      - id: enc-smtp-username
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_username }}
      - id: enc-todoist-email
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.todoist_email }}
    outputs:
      enc_cloudflare_api_token: ${{ needs.init-secrets.outputs.enc_cloudflare_api_token }}
      enc_discord_webhook_alerts: ${{ steps.enc-discord-webhook-alerts.outputs.out }}
      enc_grafana_admin_password: ${{ steps.enc-grafana-admin-password.outputs.out }}
      enc_healthchecksio_api_key: ${{ steps.enc-healthchecksio-api-key.outputs.out }}
      enc_kubeconfig_base64: ${{ steps.enc-kubeconfig-base64.outputs.out }}
      enc_s3_access_key: ${{ needs.init-secrets.outputs.enc_s3_access_key }}
      enc_s3_secret_key: ${{ needs.init-secrets.outputs.enc_s3_secret_key }}
      enc_smtp_password: ${{ steps.enc-smtp-password.outputs.out }}
      enc_smtp_port: ${{ steps.enc-smtp-port.outputs.out }}
      enc_smtp_server: ${{ steps.enc-smtp-server.outputs.out }}
      enc_smtp_username: ${{ steps.enc-smtp-username.outputs.out }}
      enc_todoist_email: ${{ steps.enc-todoist-email.outputs.out }}
      enc_vultr_api_key: ${{ needs.init-secrets.outputs.enc_vultr_api_key }}

  deploy-prod-monitoring:
    environment: production
    needs:
      - check-deploy-prod
      - secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_cloudflare_api_token }}
      - id: discord-webhook-alerts
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_discord_webhook_alerts }}
      - id: grafana-admin-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_grafana_admin_password }}
      - id: healthchecksio-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_healthchecksio_api_key }}
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - id: smtp-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_password }}
      - id: smtp-port
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_port }}
      - id: smtp-server
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_server }}
      - id: smtp-username
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_username }}
      - id: todoist-email
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_todoist_email }}
      - name: Initialize tofu
        working-directory: terraform/infrastructure/monitoring
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_discord_webhook_alerts: ${{ steps.discord-webhook-alerts.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_grafana_admin_password: ${{ steps.grafana-admin-password.outputs.out }}
          TF_VAR_healthchecksio_api_key: ${{ steps.healthchecksio-api-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_smtp_password: ${{ steps.smtp-password.outputs.out }}
          TF_VAR_smtp_port: ${{ steps.smtp-port.outputs.out }}
          TF_VAR_smtp_server: ${{ steps.smtp-server.outputs.out }}
          TF_VAR_smtp_username: ${{ steps.smtp-username.outputs.out }}
          TF_VAR_todoist_email: ${{ steps.todoist-email.outputs.out }}
      - name: Deploy
        working-directory: terraform/infrastructure/monitoring
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_discord_webhook_alerts: ${{ steps.discord-webhook-alerts.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_grafana_admin_password: ${{ steps.grafana-admin-password.outputs.out }}
          TF_VAR_healthchecksio_api_key: ${{ steps.healthchecksio-api-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_smtp_password: ${{ steps.smtp-password.outputs.out }}
          TF_VAR_smtp_port: ${{ steps.smtp-port.outputs.out }}
          TF_VAR_smtp_server: ${{ steps.smtp-server.outputs.out }}
          TF_VAR_smtp_username: ${{ steps.smtp-username.outputs.out }}
          TF_VAR_todoist_email: ${{ steps.todoist-email.outputs.out }}

  deploy-prod-gateway:
    environment: production
    needs:
      - check-deploy-prod
      - secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_cloudflare_api_token }}
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/infrastructure/gateway
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/infrastructure/gateway
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deployed-prod-foundation:
    environment: production
    needs:
      - deploy-prod-gateway
      - deploy-prod-monitoring
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deployed foundational infrastructure!"

  deploy-prod-httpbin:
    environment: production
    needs:
      - secrets
      - deployed-prod-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/httpbin
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/applications/httpbin
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deploy-prod-n8n:
    environment: production
    needs:
      - secrets
      - deployed-prod-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/n8n
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/applications/n8n
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deploy-prod-node-red:
    environment: production
    needs:
      - secrets
      - deployed-prod-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/node-red
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/applications/node-red
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deploy-prod-windmill:
    environment: production
    needs:
      - secrets
      - deployed-prod-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: windmill-postgress-password
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          out: op://Frankenstructure/Postgres - Windmill/password
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_vultr_api_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/windmill
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
          TF_VAR_windmill_postgres_password: ${{ steps.windmill-postgres-password.outputs.out }}
      - name: Deploy
        working-directory: terraform/applications/windmill
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
          TF_VAR_windmill_postgres_password: ${{ steps.windmill-postgres-password.outputs.out }}
